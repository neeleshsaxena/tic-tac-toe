{"version":3,"sources":["components/Square.js","components/Board.js","constants.js","components/Game.js","index.js"],"names":["Square","value","onClick","x","y","className","Board","squares","drawSquare","i","key","board","noOfSquares","columns","j","push","createBoard","DRAW_GAME_TEXT","PLAYER_X_NEXT","PLAYER_O_NEXT","initialState","Array","fill","currentStep","xIsNext","rows","cols","diagonal","antiDiagonal","status","isWinner","Game","props","reset","setState","calculateWinner","player","state","intToAdd","newRows","slice","newCols","length","size","Math","abs","winner","getStatus","this","makeAMove","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4bd9c6c5.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Game.css';\n\nconst Square = ({ value, onClick, x, y }) => (\n    <button className=\"square\" onClick={()=>onClick(x,y)}>\n      {value}\n    </button>\n  );\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\nimport '../styles/Game.css';\n\nconst Board = ({ squares, onClick }) => {\n\n    const drawSquare = (i, x, y) => {\n      return (\n        <Square\n          key={i}\n          value={squares[i]}\n          onClick={() => onClick(i, x, y)}\n        />\n      );\n    }\n   \n    const createBoard = () => {\n      const boardSize = 3;\n      const board = [];\n      let noOfSquares = 0;\n   \n      for (let i = 0; i < boardSize; i++) {\n        const columns = [];\n        for (let j = 0; j < boardSize; j++) {\n          columns.push(drawSquare(noOfSquares++, i, j));\n        }\n        board.push(<div key={i} className=\"board-row\">{columns}</div>);\n      }\n      return board;\n    };\n   \n    return <div>{createBoard()}</div>;\n   \n};\n\nexport default Board;","export const TOTAL_STEPS = 'total steps:';\nexport const DRAW_GAME_TEXT = 'its a DRAW! both players are good!';\nexport const GAME_TITLE = 'tic tac toe';\nexport const PLAYER_X_NEXT = 'next player: X';\nexport const PLAYER_O_NEXT = 'next player: O';\nexport const RESTART_GAME = 'restart game!';","import React from 'react';\nimport Board from './Board';\nimport '../styles/Game.css';\nimport { \n  PLAYER_X_NEXT,\n  PLAYER_O_NEXT,\n  RESTART_GAME,\n  TOTAL_STEPS,\n  DRAW_GAME_TEXT,\n  GAME_TITLE \n} from '../constants';\n\nconst initialState = {\n    squares: Array(9).fill(null),\n    currentStep: 0,\n    xIsNext: true,\n    rows: Array(3).fill(0),\n    cols: Array(3).fill(0),\n    diagonal: 0,\n    antiDiagonal: 0,\n    status: null,\n    isWinner: null\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  reset = () => {\n    this.setState(initialState);\n  }\n\n  calculateWinner = (x, y)  => {\n    const player = this.state.xIsNext ? 'X' : 'O';\n    const intToAdd = player === 'X' ? 1 : -1; // X -> 1... O -> -1\n    const newRows = this.state.rows.slice();\n    const newCols = this.state.cols.slice();\n    newRows[x] += intToAdd;\n    newCols[y] += intToAdd;\n    let diagonal = this.state.diagonal;\n    let antiDiagonal = this.state.antiDiagonal;\n    if (x === y) {\n        diagonal += intToAdd;\n    }\n    if (y === newRows.length - x - 1) {\n        antiDiagonal += intToAdd;\n    }\n    const size = newRows.length;\n    if (Math.abs(newRows[x]) === size || \n            Math.abs(newCols[y]) === size ||\n            Math.abs(diagonal) === size ||\n            Math.abs(antiDiagonal) === size\n        ) {\n            return { winner: player };\n          } else {\n            return { rows: newRows, cols: newCols, diagonal, antiDiagonal, player }\n          }\n\n  }\n\n  getStatus = (currentStep, xIsNext) => {\n    let status;\n    if (currentStep + 1 === 9) {\n        status = DRAW_GAME_TEXT;\n    } else if (xIsNext) {\n        status = PLAYER_O_NEXT;\n    } else {\n        status = PLAYER_X_NEXT;\n    }\n    return status;\n  };\n\n  makeAMove(i, x, y) {\n    if (!this.state.isWinner && this.state.status !== DRAW_GAME_TEXT && !this.state.squares[i]) {\n        const squares = this.state.squares.slice();\n        const { winner, rows, cols, diagonal, antiDiagonal, player } = this.calculateWinner(x, y);\n        \n        if (winner) {\n            squares[i] = winner;\n            this.setState({\n              status: `PLAYER ${winner} WINS!`,\n              squares,\n              isWinner: true\n            });\n            return;\n        }\n\n        squares[i] = player;\n        this.setState({\n          squares: squares,\n          xIsNext: !this.state.xIsNext,\n          currentStep: this.state.currentStep + 1,\n          rows,\n          cols,\n          status: this.getStatus(this.state.currentStep, this.state.xIsNext),\n          diagonal,\n          antiDiagonal\n        });\n    }\n  }\n\n  render() {\n    const { status } = this.state;\n    if (status === null) {\n      this.setState({ status: PLAYER_X_NEXT })\n    }\n    return (\n    <div className=\"test\">\n        <p className=\"game-title\">{GAME_TITLE}</p>\n        <div className=\"game-board\">\n        <Board\n          squares={this.state.squares}\n          onClick={(i, x, y)=> this.makeAMove(i, x, y)}\n        />\n        </div>\n        \n        <div>\n          <div className=\"stats-table\">\n            <div className=\"stats-table-cell\">{TOTAL_STEPS} {this.state.currentStep}</div>\n            <div className=\"stats-table-cell\">{status}</div>\n          </div>\n        </div>\n        <div>\n          <button onClick={this.reset} className=\"game-restart\">{RESTART_GAME}</button>\n        </div>\n    </div>\n    );\n  }\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <Game />, document.getElementById('root')\n);\n"],"sourceRoot":""}